# CSRF

### 	漏洞描述

```
（Cross-Site Request Forgery，跨站请求伪造）是一种Web应用程序安全漏洞，利用它攻击者可以在受害者不知情的情况下执行未经授权的操作
```

#### 	 漏洞原理

```
	CSRF攻击利用了Web应用程序对用户发起的请求缺乏验证机制的漏洞。攻击者构造一个恶意的请求，并诱使受害者在已登录的状态下访问包含该请求的页面。当受害者访问该页面时，浏览器会自动发送包含认证凭据（如cookie）的请求，从而使得恶意请求被执行
```

### 	 防御措施

```
	1、设置CSRF-Token，在每个用户请求中添加一个随机生成的token，用户在发起请求时改token一起提交，并且此token与用户的session进行关联
	2、设置同源策略，浏览器的同源策略会限制页面对其他域下资源的访问
	3、检查Referer头，服务器检查请求头的Referer，验证来源是否合法
```

### csrf-token

```
	CSRF令牌是一个随机生成的字符串，它与用户会话相关联，并且在每个请求中都会包含在请求参数中或者通过HTTP头部发送。服务器在接收到请求时会验证这个CSRF令牌，如果令牌与用户会话匹配，那么请求会被处理；否则，请求会被拒绝；
	csrf攻击是因为攻击者能完全伪造用户的请求数据信息，csrf-token的主要是目的是就是设置一个字段让攻击者完全无法伪造从而达到预防的效果
	
	1、如果csrf-token在请求参数中，那么受害者点击了恶意连接之后，向服务端发起请求，因为请求数据是攻击者自己构造的，少了csrf-token，服务端会校验不通过，请求就会被拒绝
	2、csrf-token在请求头中，这是因为XmlRequest类会给请求头加上csrf-token字段，这种一般使用于Ajax的异步请求，此类请求并不会被浏览器进行记录，所以受害者点击恶意连接之后，并不会帮助补充http-header中csrf-token字段的值，这样也能达到预防的效果
```

### 同源策略

```
是一种Web浏览器安全策略，旨在防止在不同源（origin）之间的恶意脚本进行交互。
其中同源指的是具有相同协议（例如http或https）、主机（hostname）和端口（port）的两个URL。
	例如，一个URL如"https://www.example.com:8080/page.html"的origin是"https://www.example.com:8080"。
	
同源策略主要限制有：
	1. 资源访问限制：一个网页只能访问来自相同origin的资源。这意味着，JavaScript代码只能访问相同origin的其他页面、Cookie、LocalStorage、SessionStorage等资源，而不能直接访问其他origin的资源。
	2. 跨域请求限制：浏览器禁止通过XMLHttpRequest或Fetch API等方式从不同origin的服务器获取数据，除非目标服务器明确允许跨域请求。这个机制称为“同源策略限制”。
	3. Cookie限制：Cookie是与特定origin关联的，因此浏览器只会向与当前页面相同origin的服务器发送相应的Cookie。这样可以防止恶意网站获取用户在其他网站上的Cookie，保护用户的隐私。
	4. DOM限制：JavaScript只能访问同源页面的DOM，而不能直接操作其他origin的DOM。这样可以防止恶意脚本对其他网站进行操纵或窃取信息。
	5. 安全沙箱：同源策略将浏览器的执行环境划分为不同的安全沙箱，使得不同origin的脚本无法相互干扰，从而提高了浏览器的安全性。
```

### Samesite Cookie属性

```
尽管CSRF攻击的办法已经了许多预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie
```

